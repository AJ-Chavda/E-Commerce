{"ast":null,"code":"import { create } from 'zustand';\nconst useStore = create(set => ({\n  user: null,\n  token: localStorage.getItem('token'),\n  cart: JSON.parse(localStorage.getItem('cart') || '[]'),\n  login: (token, user) => {\n    localStorage.setItem('token', token);\n    set({\n      token,\n      user\n    });\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    set({\n      token: null,\n      user: null\n    });\n  },\n  addToCart: product => set(state => {\n    const item = state.cart.find(p => p.id === product.id);\n    let updatedCart;\n    if (item) {\n      updatedCart = state.cart.map(p => p.id === product.id ? {\n        ...p,\n        quantity: (p.quantity || 1) + 1\n      } : p);\n    } else {\n      updatedCart = [...state.cart, {\n        ...product,\n        quantity: 1\n      }];\n    }\n    localStorage.setItem('cart', JSON.stringify(updatedCart));\n    return {\n      cart: updatedCart\n    };\n  }),\n  updateQuantity: (id, amount) => set(state => {\n    const updatedCart = state.cart.map(p => p.id === id ? {\n      ...p,\n      quantity: amount\n    } : p);\n    localStorage.setItem('cart', JSON.stringify(updatedCart));\n    return {\n      cart: updatedCart\n    };\n  }),\n  removeFromCart: id => set(state => {\n    const updatedCart = state.cart.filter(p => p.id !== id);\n    localStorage.setItem('cart', JSON.stringify(updatedCart));\n    return {\n      cart: updatedCart\n    };\n  }),\n  clearCart: () => {\n    localStorage.removeItem('cart');\n    return {\n      cart: []\n    };\n  }\n}));\nexport default useStore;","map":{"version":3,"names":["create","useStore","set","user","token","localStorage","getItem","cart","JSON","parse","login","setItem","logout","removeItem","addToCart","product","state","item","find","p","id","updatedCart","map","quantity","stringify","updateQuantity","amount","removeFromCart","filter","clearCart"],"sources":["C:/Users/aryan/Desktop/Learning/React Project/Ajmera/ecommerce-app/src/store/useStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\n\r\ntype Product = { id: number; title: string; price: number; thumbnail: string; quantity?: number };\r\n\r\ntype Store = {\r\n  user: null | { firstName: string };\r\n  token: string | null;\r\n  cart: Product[];\r\n  login: (token: string, user: any) => void;\r\n  logout: () => void;\r\n  addToCart: (product: Product) => void;\r\n  updateQuantity: (id: number, amount: number) => void;\r\n  removeFromCart: (id: number) => void;\r\n  clearCart: () => void;\r\n};\r\n\r\nconst useStore = create<Store>((set) => ({\r\n  user: null,\r\n  token: localStorage.getItem('token'),\r\n  cart: JSON.parse(localStorage.getItem('cart') || '[]'),\r\n  login: (token, user) => {\r\n    localStorage.setItem('token', token);\r\n    set({ token, user });\r\n  },\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    set({ token: null, user: null });\r\n  },\r\n  addToCart: (product) => set((state) => {\r\n    const item = state.cart.find((p) => p.id === product.id);\r\n    let updatedCart;\r\n    if (item) {\r\n      updatedCart = state.cart.map((p) =>\r\n        p.id === product.id ? { ...p, quantity: (p.quantity || 1) + 1 } : p\r\n      );\r\n    } else {\r\n      updatedCart = [...state.cart, { ...product, quantity: 1 }];\r\n    }\r\n    localStorage.setItem('cart', JSON.stringify(updatedCart));\r\n    return { cart: updatedCart };\r\n  }),\r\n  updateQuantity: (id, amount) => set((state) => {\r\n    const updatedCart = state.cart.map((p) =>\r\n      p.id === id ? { ...p, quantity: amount } : p\r\n    );\r\n    localStorage.setItem('cart', JSON.stringify(updatedCart));\r\n    return { cart: updatedCart };\r\n  }),\r\n  removeFromCart: (id) => set((state) => {\r\n    const updatedCart = state.cart.filter((p) => p.id !== id);\r\n    localStorage.setItem('cart', JSON.stringify(updatedCart));\r\n    return { cart: updatedCart };\r\n  }),\r\n  clearCart: () => {\r\n    localStorage.removeItem('cart');\r\n    return { cart: [] };\r\n  },\r\n}));\r\n\r\nexport default useStore;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAgBhC,MAAMC,QAAQ,GAAGD,MAAM,CAASE,GAAG,KAAM;EACvCC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACpCC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;EACtDI,KAAK,EAAEA,CAACN,KAAK,EAAED,IAAI,KAAK;IACtBE,YAAY,CAACM,OAAO,CAAC,OAAO,EAAEP,KAAK,CAAC;IACpCF,GAAG,CAAC;MAAEE,KAAK;MAAED;IAAK,CAAC,CAAC;EACtB,CAAC;EACDS,MAAM,EAAEA,CAAA,KAAM;IACZP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCX,GAAG,CAAC;MAAEE,KAAK,EAAE,IAAI;MAAED,IAAI,EAAE;IAAK,CAAC,CAAC;EAClC,CAAC;EACDW,SAAS,EAAGC,OAAO,IAAKb,GAAG,CAAEc,KAAK,IAAK;IACrC,MAAMC,IAAI,GAAGD,KAAK,CAACT,IAAI,CAACW,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;IACxD,IAAIC,WAAW;IACf,IAAIJ,IAAI,EAAE;MACRI,WAAW,GAAGL,KAAK,CAACT,IAAI,CAACe,GAAG,CAAEH,CAAC,IAC7BA,CAAC,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,GAAG;QAAE,GAAGD,CAAC;QAAEI,QAAQ,EAAE,CAACJ,CAAC,CAACI,QAAQ,IAAI,CAAC,IAAI;MAAE,CAAC,GAAGJ,CACpE,CAAC;IACH,CAAC,MAAM;MACLE,WAAW,GAAG,CAAC,GAAGL,KAAK,CAACT,IAAI,EAAE;QAAE,GAAGQ,OAAO;QAAEQ,QAAQ,EAAE;MAAE,CAAC,CAAC;IAC5D;IACAlB,YAAY,CAACM,OAAO,CAAC,MAAM,EAAEH,IAAI,CAACgB,SAAS,CAACH,WAAW,CAAC,CAAC;IACzD,OAAO;MAAEd,IAAI,EAAEc;IAAY,CAAC;EAC9B,CAAC,CAAC;EACFI,cAAc,EAAEA,CAACL,EAAE,EAAEM,MAAM,KAAKxB,GAAG,CAAEc,KAAK,IAAK;IAC7C,MAAMK,WAAW,GAAGL,KAAK,CAACT,IAAI,CAACe,GAAG,CAAEH,CAAC,IACnCA,CAAC,CAACC,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGD,CAAC;MAAEI,QAAQ,EAAEG;IAAO,CAAC,GAAGP,CAC7C,CAAC;IACDd,YAAY,CAACM,OAAO,CAAC,MAAM,EAAEH,IAAI,CAACgB,SAAS,CAACH,WAAW,CAAC,CAAC;IACzD,OAAO;MAAEd,IAAI,EAAEc;IAAY,CAAC;EAC9B,CAAC,CAAC;EACFM,cAAc,EAAGP,EAAE,IAAKlB,GAAG,CAAEc,KAAK,IAAK;IACrC,MAAMK,WAAW,GAAGL,KAAK,CAACT,IAAI,CAACqB,MAAM,CAAET,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKA,EAAE,CAAC;IACzDf,YAAY,CAACM,OAAO,CAAC,MAAM,EAAEH,IAAI,CAACgB,SAAS,CAACH,WAAW,CAAC,CAAC;IACzD,OAAO;MAAEd,IAAI,EAAEc;IAAY,CAAC;EAC9B,CAAC,CAAC;EACFQ,SAAS,EAAEA,CAAA,KAAM;IACfxB,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/B,OAAO;MAAEN,IAAI,EAAE;IAAG,CAAC;EACrB;AACF,CAAC,CAAC,CAAC;AAEH,eAAeN,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}